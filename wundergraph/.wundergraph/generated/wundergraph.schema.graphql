# Code generated by "wunderctl"; DO NOT EDIT.

"""
The @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.

A potential use-case could be that you have a graphql upstream which is not accepting null values for variables.
By enabling this directive all variables with null values will be removed from upstream query.

query ($say: String, $name: String) @removeNullVariables {
	hello(say: $say, name: $name)
}

Directive will transform variables json and remove top level null values.
{ "say": null, "name": "world" }

So upstream will receive the following variables:

{ "name": "world" }
"""
directive @removeNullVariables on QUERY | MUTATION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
  """Optional field to apply the JSON schema to"""
  on: String
) repeatable on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The @fromClaim directive sets the variable to the value retrieved from the given a claim.
Adding this directive makes the operation require authentication.
"""
directive @fromClaim(name: WG_CLAIM, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
  on: String = ""
) repeatable on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID(on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

"""
The @requireAuthentication Directive marks an Operation to require authentication.
Without authentication, the operation will return an Unauthorized error with status code 401.
"""
directive @requireAuthentication on QUERY | MUTATION | SUBSCRIPTION

type countries_Continent {
  code: ID!
  countries: [countries_Country!]!
  name: String!
  _join: Query!
}

input countries_ContinentFilterInput {
  code: countries_StringQueryOperatorInput
}

type countries_Country {
  awsRegion: String!
  capital: String
  code: ID!
  continent: countries_Continent!
  currencies: [String!]!
  currency: String
  emoji: String!
  emojiU: String!
  languages: [countries_Language!]!
  name(lang: String): String!
  native: String!
  phone: String!
  phones: [String!]!
  states: [countries_State!]!
  subdivisions: [countries_Subdivision!]!
  _join: Query!
}

input countries_CountryFilterInput {
  code: countries_StringQueryOperatorInput
  continent: countries_StringQueryOperatorInput
  currency: countries_StringQueryOperatorInput
}

type countries_Language {
  code: ID!
  name: String!
  native: String!
  rtl: Boolean!
  _join: Query!
}

input countries_LanguageFilterInput {
  code: countries_StringQueryOperatorInput
}

"""The root query type which gives access points into the data universe."""
type Query implements pg_Node {
  countries_continent(code: ID!): countries_Continent
  countries_continents(filter: countries_ContinentFilterInput = {}): [countries_Continent!]!
  countries_countries(filter: countries_CountryFilterInput = {}): [countries_Country!]!
  countries_country(code: ID!): countries_Country
  countries_language(code: ID!): countries_Language
  countries_languages(filter: countries_LanguageFilterInput = {}): [countries_Language!]!
  """Fetches an object given its globally unique `ID`."""
  pg_node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): pg_Node
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  pg_nodeId: ID!
  pg_post(id: Int!): pg_Post
  """Reads a single `Post` using its globally unique `ID`."""
  pg_postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): pg_Post
  """Reads and enables pagination through a set of `Post`."""
  pg_posts(
    """Read all values in the set after (below) this cursor."""
    after: pg_Cursor
    """Read all values in the set before (above) this cursor."""
    before: pg_Cursor
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: pg_PostCondition
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsConnection
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  pg_query: Query!
  pg_user(id: Int!): pg_User
  """Reads a single `User` using its globally unique `ID`."""
  pg_userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): pg_User
  """Reads and enables pagination through a set of `User`."""
  pg_users(
    """Read all values in the set after (below) this cursor."""
    after: pg_Cursor
    """Read all values in the set before (above) this cursor."""
    before: pg_Cursor
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: pg_UserCondition
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [pg_UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_UsersConnection
}

type countries_State {
  code: String
  country: countries_Country!
  name: String!
  _join: Query!
}

input countries_StringQueryOperatorInput {
  eq: String
  in: [String!]
  ne: String
  nin: [String!]
  regex: String
}

type countries_Subdivision {
  code: ID!
  emoji: String
  name: String!
  _join: Query!
}

"""All input for the create `Post` mutation."""
input pg_CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `Post` to be created by this mutation."""
  post: pg_PostInput!
}

"""The output of our create `Post` mutation."""
type pg_CreatePostPayload {
  """Reads a single `User` that is related to this `Post`."""
  author: pg_User
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Post` that was created by this mutation."""
  post: pg_Post
  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsEdge
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  _join: Query!
}

"""All input for the create `User` mutation."""
input pg_CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `User` to be created by this mutation."""
  user: pg_UserInput!
}

"""The output of our create `User` mutation."""
type pg_CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """The `User` that was created by this mutation."""
  user: pg_User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [pg_UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_UsersEdge
  _join: Query!
}

"""A location in a connection that can be used for resuming pagination."""
scalar pg_Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar pg_Datetime

"""All input for the `deletePostByNodeId` mutation."""
input pg_DeletePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePost` mutation."""
input pg_DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Post` mutation."""
type pg_DeletePostPayload {
  """Reads a single `User` that is related to this `Post`."""
  author: pg_User
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPostNodeId: ID
  """The `Post` that was deleted by this mutation."""
  post: pg_Post
  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsEdge
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  _join: Query!
}

"""All input for the `deleteUserByNodeId` mutation."""
input pg_DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input pg_DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type pg_DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """The `User` that was deleted by this mutation."""
  user: pg_User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [pg_UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_UsersEdge
  _join: Query!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Post`."""
  pg_createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_CreatePostInput!
  ): pg_CreatePostPayload
  """Creates a single `User`."""
  pg_createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_CreateUserInput!
  ): pg_CreateUserPayload
  """Deletes a single `Post` using a unique key."""
  pg_deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_DeletePostInput!
  ): pg_DeletePostPayload
  """Deletes a single `Post` using its globally unique id."""
  pg_deletePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_DeletePostByNodeIdInput!
  ): pg_DeletePostPayload
  """Deletes a single `User` using a unique key."""
  pg_deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_DeleteUserInput!
  ): pg_DeleteUserPayload
  """Deletes a single `User` using its globally unique id."""
  pg_deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_DeleteUserByNodeIdInput!
  ): pg_DeleteUserPayload
  """Updates a single `Post` using a unique key and a patch."""
  pg_updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_UpdatePostInput!
  ): pg_UpdatePostPayload
  """Updates a single `Post` using its globally unique id and a patch."""
  pg_updatePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_UpdatePostByNodeIdInput!
  ): pg_UpdatePostPayload
  """Updates a single `User` using a unique key and a patch."""
  pg_updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_UpdateUserInput!
  ): pg_UpdateUserPayload
  """Updates a single `User` using its globally unique id and a patch."""
  pg_updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: pg_UpdateUserByNodeIdInput!
  ): pg_UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface pg_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type pg_PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: pg_Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: pg_Cursor
  _join: Query!
}

"""Forum posts written by a user."""
type pg_Post implements pg_Node {
  """Reads a single `User` that is related to this `Post`."""
  author: pg_User
  authorId: Int!
  body: String
  createdDate: pg_Datetime
  id: Int!
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  title: String
  _join: Query!
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input pg_PostCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: Int
  """Checks for equality with the object’s `body` field."""
  body: String
  """Checks for equality with the object’s `createdDate` field."""
  createdDate: pg_Datetime
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `Post`"""
input pg_PostInput {
  authorId: Int!
  body: String
  createdDate: pg_Datetime
  id: Int
  title: String
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input pg_PostPatch {
  authorId: Int
  body: String
  createdDate: pg_Datetime
  id: Int
  title: String
}

"""A connection to a list of `Post` values."""
type pg_PostsConnection {
  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [pg_PostsEdge!]!
  """A list of `Post` objects."""
  nodes: [pg_Post!]!
  """Information to aid in pagination."""
  pageInfo: pg_PageInfo!
  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
  _join: Query!
}

"""A `Post` edge in the connection."""
type pg_PostsEdge {
  """A cursor for use in pagination."""
  cursor: pg_Cursor
  """The `Post` at the end of the edge."""
  node: pg_Post!
  _join: Query!
}

"""Methods to use when ordering `Post`."""
enum pg_PostsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """Fetches an object given its globally unique `ID`. (live)"""
  pg_node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): pg_Node
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  pg_nodeId: ID!
  """ (live)"""
  pg_post(id: Int!): pg_Post
  """Reads a single `Post` using its globally unique `ID`. (live)"""
  pg_postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): pg_Post
  """Reads and enables pagination through a set of `Post`. (live)"""
  pg_posts(
    """Read all values in the set after (below) this cursor."""
    after: pg_Cursor
    """Read all values in the set before (above) this cursor."""
    before: pg_Cursor
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: pg_PostCondition
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsConnection
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  pg_query: Query!
  """ (live)"""
  pg_user(id: Int!): pg_User
  """Reads a single `User` using its globally unique `ID`. (live)"""
  pg_userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): pg_User
  """Reads and enables pagination through a set of `User`. (live)"""
  pg_users(
    """Read all values in the set after (below) this cursor."""
    after: pg_Cursor
    """Read all values in the set before (above) this cursor."""
    before: pg_Cursor
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: pg_UserCondition
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [pg_UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_UsersConnection
}

"""All input for the `updatePostByNodeId` mutation."""
input pg_UpdatePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  nodeId: ID!
  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: pg_PostPatch!
}

"""All input for the `updatePost` mutation."""
input pg_UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: pg_PostPatch!
}

"""The output of our update `Post` mutation."""
type pg_UpdatePostPayload {
  """Reads a single `User` that is related to this `Post`."""
  author: pg_User
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Post` that was updated by this mutation."""
  post: pg_Post
  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsEdge
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  _join: Query!
}

"""All input for the `updateUserByNodeId` mutation."""
input pg_UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!
  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: pg_UserPatch!
}

"""All input for the `updateUser` mutation."""
input pg_UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: pg_UserPatch!
}

"""The output of our update `User` mutation."""
type pg_UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """The `User` that was updated by this mutation."""
  user: pg_User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [pg_UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_UsersEdge
  _join: Query!
}

"""Forum users."""
type pg_User implements pg_Node {
  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Read all values in the set after (below) this cursor."""
    after: pg_Cursor
    """Read all values in the set before (above) this cursor."""
    before: pg_Cursor
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: pg_PostCondition
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Post`."""
    orderBy: [pg_PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): pg_PostsConnection!
  createdDate: pg_Datetime
  id: Int!
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String
  _join: Query!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input pg_UserCondition {
  """Checks for equality with the object’s `createdDate` field."""
  createdDate: pg_Datetime
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input pg_UserInput {
  createdDate: pg_Datetime
  id: Int
  username: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input pg_UserPatch {
  createdDate: pg_Datetime
  id: Int
  username: String
}

"""A connection to a list of `User` values."""
type pg_UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [pg_UsersEdge!]!
  """A list of `User` objects."""
  nodes: [pg_User!]!
  """Information to aid in pagination."""
  pageInfo: pg_PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
  _join: Query!
}

"""A `User` edge in the connection."""
type pg_UsersEdge {
  """A cursor for use in pagination."""
  cursor: pg_Cursor
  """The `User` at the end of the edge."""
  node: pg_User!
  _join: Query!
}

"""Methods to use when ordering `User`."""
enum pg_UsersOrderBy {
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

"""Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml"""
enum WG_CLAIM {
  """iss"""
  ISSUER
  """deprecated alias for ISSUER"""
  PROVIDER
  """sub"""
  SUBJECT
  """alias for sub"""
  USERID
  """name"""
  NAME
  """given_name"""
  GIVEN_NAME
  """family_name"""
  FAMILY_NAME
  """middle_name"""
  MIDDLE_NAME
  """nickname"""
  NICKNAME
  """preferred_username"""
  PREFERRED_USERNAME
  """profile"""
  PROFILE
  """picture"""
  PICTURE
  """website"""
  WEBSITE
  """email"""
  EMAIL
  """email_verified"""
  EMAIL_VERIFIED
  """gender"""
  GENDER
  """birthdate"""
  BIRTH_DATE
  """zoneinfo"""
  ZONE_INFO
  """locale"""
  LOCALE
  """location"""
  LOCATION
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}