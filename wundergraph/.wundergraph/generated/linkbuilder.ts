// Code generated by wunderctl. DO NOT EDIT.

export interface LinkDefinition {
	targetType: string;
	targetFieldName: string;
	sourceField: string;
	argumentSources: LinkFieldArgumentSourceDefinition[];
}

export interface LinkFieldArgumentSourceDefinition {
	name: string;
	type: "objectField" | "fieldArgument";
	path: string[];
}

class LinkBuilder<T, R extends {} = {}, TT = {}> {
	// @ts-ignore
	constructor(current: R = {}, sourceField: string, targetType: string, targetField: string) {
		this.current = current;
		this.sourceField = sourceField;
		this.targetType = targetType;
		this.targetField = targetField;
	}

	private readonly sourceField: string;
	private readonly targetType: string;
	private readonly targetField: string;

	// @ts-ignore
	private current: R = {};

	argument<P extends Exclude<keyof T, keyof R>, V extends T[P], S extends "fieldArgument" | "objectField">(
		key: P,
		source: S,
		value: S extends "fieldArgument" ? string : TT,
		...extraPath: string[]
	) {
		const extra: {} = { [key]: { source, path: [value, ...extraPath] } };

		const instance = {
			...(this.current as object),
			...extra,
		} as R & Pick<T, P>;

		return new LinkBuilder<T, R & Pick<T, P>, TT>(instance, this.sourceField, this.targetType, this.targetField);
	}

	build = (): LinkDefinition => {
		const args = this.current as { [key: string]: { path: string[]; source: "fieldArgument" | "objectField" } };
		return {
			argumentSources: Object.keys(args).map((key) => ({
				name: key,
				type: args[key].source,
				path: args[key].path,
			})),
			targetType: this.targetType,
			sourceField: this.sourceField,
			targetFieldName: this.targetField,
		};
	};
}

export const sourceStep = <T extends {}, R extends {}>() => ({
	source: <F extends keyof T>(field: F) => {
		return targetStep<T, F, R>(field);
	},
});

const targetStep = <T, F extends keyof T, R>(field: F) => ({
	target: <r extends keyof R>(targetType: r, targetField: string) => {
		return new LinkBuilder<T[F], {}, R[r]>({}, field as string, targetType as string, targetField);
	},
});

interface TargetTypes {
	countries_Continent: "code" | "countries" | "name" | "_join";
	countries_Country:
		| "awsRegion"
		| "capital"
		| "code"
		| "continent"
		| "currencies"
		| "currency"
		| "emoji"
		| "emojiU"
		| "languages"
		| "name"
		| "native"
		| "phone"
		| "phones"
		| "states"
		| "subdivisions"
		| "_join";
	countries_Language: "code" | "name" | "native" | "rtl" | "_join";
	countries_State: "code" | "country" | "name" | "_join";
	countries_Subdivision: "code" | "emoji" | "name" | "_join";
	pg_CreatePostPayload: "author" | "clientMutationId" | "post" | "postEdge" | "query" | "_join";
	pg_CreateUserPayload: "clientMutationId" | "query" | "user" | "userEdge" | "_join";
	pg_DeletePostPayload: "author" | "clientMutationId" | "deletedPostNodeId" | "post" | "postEdge" | "query" | "_join";
	pg_DeleteUserPayload: "clientMutationId" | "deletedUserNodeId" | "query" | "user" | "userEdge" | "_join";
	pg_Node: "nodeId";
	pg_PageInfo: "endCursor" | "hasNextPage" | "hasPreviousPage" | "startCursor" | "_join";
	pg_Post: "author" | "authorId" | "body" | "createdDate" | "id" | "nodeId" | "title" | "_join";
	pg_PostsConnection: "edges" | "nodes" | "pageInfo" | "totalCount" | "_join";
	pg_PostsEdge: "cursor" | "node" | "_join";
	pg_UpdatePostPayload: "author" | "clientMutationId" | "post" | "postEdge" | "query" | "_join";
	pg_UpdateUserPayload: "clientMutationId" | "query" | "user" | "userEdge" | "_join";
	pg_User: "authoredPosts" | "createdDate" | "id" | "nodeId" | "username" | "_join";
	pg_UsersConnection: "edges" | "nodes" | "pageInfo" | "totalCount" | "_join";
	pg_UsersEdge: "cursor" | "node" | "_join";
}

interface SourceFields {
	countries_continent: {
		code: null;
	};
	countries_continents: {
		filter: null;
	};
	countries_countries: {
		filter: null;
	};
	countries_country: {
		code: null;
	};
	countries_language: {
		code: null;
	};
	countries_languages: {
		filter: null;
	};
	pg_node: {
		nodeId: null;
	};
	pg_nodeId: {};
	pg_post: {
		id: null;
	};
	pg_postByNodeId: {
		nodeId: null;
	};
	pg_posts: {
		after: null;
		before: null;
		condition: null;
		first: null;
		last: null;
		offset: null;
		orderBy: null;
	};
	pg_query: {};
	pg_user: {
		id: null;
	};
	pg_userByNodeId: {
		nodeId: null;
	};
	pg_users: {
		after: null;
		before: null;
		condition: null;
		first: null;
		last: null;
		offset: null;
		orderBy: null;
	};
}

const linkBuilder = sourceStep<SourceFields, TargetTypes>();
export default linkBuilder;
